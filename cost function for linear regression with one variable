{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyPsN3oCLm0jGYqxuIsLjswh",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/digvijaysingh21/AI_ML_Libraries_foundational/blob/main/cost%20function%20for%20linear%20regression%20with%20one%20variable\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**cost function for linear regression with one variable**"
      ],
      "metadata": {
        "id": "HQccfqHq0LAP"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "** ```\n",
        "\n",
        "The cost function for linear regression with one variable (also known as simple linear regression) is given by:\n",
        "\n",
        "ùêΩ\n",
        "(\n",
        "ùúÉ\n",
        "0\n",
        ",\n",
        "ùúÉ\n",
        "1\n",
        ")\n",
        "=\n",
        "1\n",
        "2\n",
        "ùëö\n",
        "‚àë\n",
        "ùëñ\n",
        "=\n",
        "1\n",
        "ùëö\n",
        "(\n",
        "‚Ñé\n",
        "ùúÉ\n",
        "(\n",
        "ùë•\n",
        "ùëñ\n",
        ")\n",
        "‚àí\n",
        "ùë¶\n",
        "ùëñ\n",
        ")\n",
        "2\n",
        "J(Œ∏\n",
        "0\n",
        "‚Äã\n",
        " ,Œ∏\n",
        "1\n",
        "‚Äã\n",
        " )=\n",
        "2m\n",
        "1\n",
        "‚Äã\n",
        "  \n",
        "i=1\n",
        "‚àë\n",
        "m\n",
        "‚Äã\n",
        " (h\n",
        "Œ∏\n",
        "‚Äã\n",
        " (x\n",
        "i\n",
        "‚Äã\n",
        " )‚àíy\n",
        "i\n",
        "‚Äã\n",
        " )\n",
        "2\n",
        "\n",
        "where:\n",
        "\n",
        "ùëö\n",
        "m is the number of training examples.\n",
        "‚Ñé\n",
        "ùúÉ\n",
        "(\n",
        "ùë•\n",
        ")\n",
        "=\n",
        "ùúÉ\n",
        "0\n",
        "+\n",
        "ùúÉ\n",
        "1\n",
        "ùë•\n",
        "h\n",
        "Œ∏\n",
        "‚Äã\n",
        " (x)=Œ∏\n",
        "0\n",
        "‚Äã\n",
        " +Œ∏\n",
        "1\n",
        "‚Äã\n",
        " x is the hypothesis (prediction).\n",
        "(\n",
        "ùë•\n",
        "ùëñ\n",
        ",\n",
        "ùë¶\n",
        "ùëñ\n",
        ")\n",
        "(x\n",
        "i\n",
        "‚Äã\n",
        " ,y\n",
        "i\n",
        "‚Äã\n",
        " ) are the training examples.\n",
        "ùúÉ\n",
        "0\n",
        "Œ∏\n",
        "0\n",
        "‚Äã\n",
        "  and\n",
        "ùúÉ\n",
        "1\n",
        "Œ∏\n",
        "1\n",
        "‚Äã\n",
        "  are the parameters of the model.\n",
        "ùêΩ\n",
        "(\n",
        "ùúÉ\n",
        "0\n",
        ",\n",
        "ùúÉ\n",
        "1\n",
        ")\n",
        "J(Œ∏\n",
        "0\n",
        "‚Äã\n",
        " ,Œ∏\n",
        "1\n",
        "‚Äã\n",
        " ) is the cost function (Mean Squared Error scaled by\n",
        "1\n",
        "2\n",
        "2\n",
        "1\n",
        "‚Äã\n",
        " ).\n",
        "\n",
        "``` **"
      ],
      "metadata": {
        "id": "PGGnm1xrAsiF"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import matplotlib.pyplot as plt"
      ],
      "metadata": {
        "id": "xD7wcf35BE5a"
      },
      "execution_count": 13,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Cost function for linear regression\n",
        "def compute_cost(X,y, theta):\n",
        "  m = len(y) #number of training examples\n",
        "  predictions = X.dot(theta) #hypothesis function\n",
        "  errors = predictions - y #errors\n",
        "  cost = ( 1 / (2 * m)) * np.sum(errors ** 2) # cost function\n",
        "  return cost\n",
        "\n",
        "#example dataset\n",
        "X = np.array([1,2,3,4,5])\n",
        "y = np.array([2,4,6,8,10])\n",
        "\n",
        "# add bias term to x\n",
        "X = np.c_[np.ones(X.shape[0]), X]\n",
        "\n",
        "# initial theta value\n",
        "theta = np.array([0,0])\n",
        "\n",
        "# compute initial cost\n",
        "cost = compute_cost(X, y, theta)\n",
        "print(\"Initial cost:\", cost)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "fJmh_sJoCtEF",
        "outputId": "c6748691-a9ff-47a5-cb60-b97b2b7e6e45"
      },
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Initial cost: 22.0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Cost function for linear regression\n",
        "def compute_cost(X, y, theta):\n",
        "    m = len(y)  # Number of training examples\n",
        "    predictions = X.dot(theta)  # Compute predictions\n",
        "    cost = (1 / (2 * m)) * np.sum((predictions - y) ** 2)  # Compute cost function\n",
        "    return cost\n",
        "\n",
        "# Example dataset\n",
        "X = np.array([1, 2, 3, 4, 5])  # Input features\n",
        "y = np.array([2, 4, 6, 8, 10])  # Target values\n",
        "\n",
        "# Add bias term (column of ones) to X\n",
        "X_b = np.c_[np.ones(X.shape[0]), X]  # X_b is now a (5,2) matrix\n",
        "\n",
        "# Try different values of theta1 while keeping theta0 constant\n",
        "theta0 = 0  # Fix theta_0\n",
        "theta1_values = np.linspace(-2, 4, 100)  # Trying different values for Œ∏1\n",
        "cost_values = [compute_cost(X_b, y, np.array([0, t])) for t in theta1_values]\n",
        "\n",
        "# Plot cost function for different values of theta1\n",
        "plt.figure(figsize=(8, 5))\n",
        "plt.plot(theta1_values, cost_values, label=\"Cost Function\", color=\"blue\")\n",
        "plt.scatter(0, compute_cost(X_b, y, np.array([0, 0])) , color='red', label=\"Initial Cost\")\n",
        "plt.xlabel(r'$\\theta_1$ (Slope)')\n",
        "plt.ylabel(\"Cost\")\n",
        "plt.title(\"Cost Function vs. Theta1\")\n",
        "plt.axvline(x=0, color='r', linestyle='--', label=\"Initial Theta1\")\n",
        "plt.legend()\n",
        "plt.grid()\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 491
        },
        "id": "NF1u2RBCDaS7",
        "outputId": "951a3457-4317-46a8-96f0-a9ee1ceec6f9"
      },
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "CFb-nKd_FWfr"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}